{"version":3,"sources":["index.js"],"names":["display","justifyContent","flexDirection","appTitle","margin","fontSize","alignSelf","input","height","width","submit","buttons","list","ToDo","props","state","tasks","task","updateTasks","bind","removeTask","localStorage","getItem","this","setState","JSON","parse","isLoading","nextProps","nextState","setItem","stringify","value","event","find","t","name","alert","preventDefault","newTasks","id","length","filter","style","type","onChange","newTask","target","placeholder","onClick","disabled","map","item","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qMAIMA,G,MAAU,CACdA,QAAS,OACTC,eAAgB,SAChBC,cAAe,WAEXC,EAAW,CACfC,OAAQ,GACRC,SAAU,GACVC,UAAW,UAEPC,EAAQ,CACZH,OAAQ,GACRC,SAAU,GACVG,OAAQ,GACRC,MAAO,IACPH,UAAW,UAEPI,EAAS,CACbN,OAAQ,GACRC,SAAU,GACVG,OAAQ,GACRC,MAAO,IACPH,UAAW,UAEPK,EAAU,CACdT,cAAe,MACfI,UAAW,UAEPM,EAAO,CACXP,SAAU,IAGNQ,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,GACPC,KAAM,IAER,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBARD,E,iEAajBE,aAAaC,QAAQ,UACnBC,KAAKC,SAAS,CACZR,MAAOS,KAAKC,MAAML,aAAaC,QAAQ,UACvCK,WAAW,M,0CAIGC,EAAWC,GAC7BR,aAAaS,QAAQ,QAASL,KAAKM,UAAUF,EAAUb,U,8BAGjDgB,GACNT,KAAKC,SAAS,CACZP,KAAMe,M,kCAKEC,GAAQ,IAAD,OACjB,GAAIV,KAAKR,MAAMC,MAAMkB,MAAK,SAACC,GAAD,OAAOA,EAAEC,OAAS,EAAKrB,MAAME,QACrDoB,MAAM,+CACD,CACLJ,EAAMK,iBACN,IAAMC,EAAQ,YAAOhB,KAAKR,MAAMC,OAChCO,KAAKC,SACH,CACER,MAAM,CACJ,CACEoB,KAAMb,KAAKR,MAAME,KACjBuB,GAAIjB,KAAKR,MAAMC,MAAMyB,OAAS,IAH7B,mBAKAF,IAELtB,KAAM,KAER,WACEI,aAAaS,QAAQ,QAASL,KAAKM,UAAU,EAAKhB,MAAMC,c,iCAMrDwB,GACT,IAAMD,EAAW,YAAIhB,KAAKR,MAAMC,OAAO0B,QAAO,SAACzB,GAAD,OAAUA,EAAKuB,KAAOA,KACpEjB,KAAKC,SACH,CACER,MAAM,YAAKuB,KAEb,WACElB,aAAaS,QAAQ,QAASL,KAAKM,UAAUQ,S,+BAKzC,IAAD,OACP,OACE,uBAAMI,MAAO3C,EAAb,UACE,qBAAK2C,MAAOxC,EAAZ,SAAuBoB,KAAKT,MAAMsB,OAClC,uBACEO,MAAOpC,EACPqC,KAAK,OACLZ,MAAOT,KAAKR,MAAME,KAClB4B,SAAU,SAACZ,GAAD,OAAW,EAAKa,QAAQb,EAAMc,OAAOf,QAC/CgB,YAAY,kBAEd,wBACEL,MAAOjC,EACPuC,QAAS1B,KAAKL,YACdgC,SAA8B,KAApB3B,KAAKR,MAAME,KAHvB,sBAOA,oBAAI0B,MAAO/B,EAAX,SACGW,KAAKR,MAAMC,MAAMmC,KAAI,SAACC,GACrB,OACE,+BACGA,EAAKhB,KACN,wBACEa,QAAS,WACP,EAAK7B,WAAWgC,EAAKZ,KAEvBG,MAAOjC,EAJT,sBAFO0C,EAAKZ,SAcpB,qBAAKG,MAAOhC,W,GAvGD0C,IAAMC,WA4GzBC,IAASC,OACP,cAAC3C,EAAD,CAAMuB,KAAM,iBACZqB,SAASC,eAAe,U","file":"static/js/main.1f90d027.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst display = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n};\nconst appTitle = {\n  margin: 20,\n  fontSize: 70,\n  alignSelf: \"center\",\n};\nconst input = {\n  margin: 20,\n  fontSize: 25,\n  height: 40,\n  width: 800,\n  alignSelf: \"center\",\n};\nconst submit = {\n  margin: 20,\n  fontSize: 20,\n  height: 40,\n  width: 130,\n  alignSelf: \"center\",\n};\nconst buttons = {\n  flexDirection: \"row\",\n  alignSelf: \"center\",\n};\nconst list = {\n  fontSize: 30,\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: [],\n      task: \"\",\n    };\n    this.updateTasks = this.updateTasks.bind(this);\n    this.removeTask = this.removeTask.bind(this);\n  }\n  // Checks if stored information exists and loads them as our starting state.\n  // Data is visible on our page.\n  componentWillMount() {\n    localStorage.getItem(\"tasks\") &&\n      this.setState({\n        tasks: JSON.parse(localStorage.getItem(\"tasks\")),\n        isLoading: false,\n      });\n  }\n  // Checks for data in local storage and we choose what data we want to use.\n  componentWillUpdate(nextProps, nextState) {\n    localStorage.setItem(\"tasks\", JSON.stringify(nextState.tasks));\n  }\n  // Gets data of last entry.\n  newTask(value) {\n    this.setState({\n      task: value,\n    });\n  }\n  // Checks if last entered task is in our list of tasks.\n  // Adds latest entered task throught input and becomes one of the objects in our task array and is stored locally.\n  updateTasks(event) {\n    if (this.state.tasks.find((t) => t.name === this.state.task)) {\n      alert(\"YOU ALREADY HAVE THIS TASK ON YOUR LIST\");\n    } else {\n      event.preventDefault();\n      const newTasks = [...this.state.tasks];\n      this.setState(\n        {\n          tasks: [\n            {\n              name: this.state.task,\n              id: this.state.tasks.length + 1,\n            },\n            ...newTasks,\n          ],\n          task: \"\",\n        },\n        () => {\n          localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\n        }\n      );\n    }\n  }\n  // Removes task from our tasks array and local storage.\n  removeTask(id) {\n    const newTasks = [...this.state.tasks].filter((task) => task.id !== id);\n    this.setState(\n      {\n        tasks: [...newTasks],\n      },\n      () => {\n        localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n      }\n    );\n  }\n\n  render() {\n    return (\n      <form style={display}>\n        <div style={appTitle}>{this.props.name}</div>\n        <input\n          style={input}\n          type=\"text\"\n          value={this.state.task}\n          onChange={(event) => this.newTask(event.target.value)}\n          placeholder=\"  Add Task...\"\n        />\n        <button\n          style={submit}\n          onClick={this.updateTasks}\n          disabled={this.state.task === \"\" ? true : false}\n        >\n          Add Task\n        </button>\n        <ul style={list}>\n          {this.state.tasks.map((item) => {\n            return (\n              <li key={item.id}>\n                {item.name}\n                <button\n                  onClick={() => {\n                    this.removeTask(item.id);\n                  }}\n                  style={submit}\n                >\n                  Remove\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n        <div style={buttons}></div>\n      </form>\n    );\n  }\n}\nReactDOM.render(\n  <ToDo name={\"ToDo Tracker\"} />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}